import React, {useState, useEffect, useRef} from 'react';
import QuizQuestionView from './QuizQuestionView';
import AnswerCircles from './AnswerCircles';
import Particle from "./Particle";
import Waves from "./Waves";
import Net from "./fishnet";

function QuizGameView({questions, gameOverCallback, results, userAnswerClick}) {
    const [questionIndex, setQuestionIndex] = useState(0);
    const [resetTimer, setResetTimer] = useState(false);
    const [timerActive, setTimerActive] = useState(true);
    const [resultAnswer, setResultAnswer] = useState({resultIdx: -1, resultSuccess: null});
    const [fullTime, setfullTime] = useState(25);
    const windowRef = useRef(null);
    const { width } = useContainerDimensions(windowRef);

    const currentQuestion = questions[questionIndex];

    // Callback for when the user clicks on an answer
    const userSelectAnswer = (answerNumber) => {
        setTimerActive(false);
        userAnswerClick(answerNumber, questionIndex);

        // Display clicked button result
        setResultAnswer({
            resultIdx: answerNumber,
            resultSuccess: answerNumber === currentQuestion.correctAnswer,
        })

        const nextQuestion = () => {
            // Check if there are still questions remaining
            if (questionIndex + 1 < questions.length) {
                if (answerNumber !== currentQuestion.correctAnswer) {
                    setfullTime(Math.max(5, fullTime - 2));
                } else setfullTime(Math.min(15, fullTime + 1));
                setResultAnswer({resultIdx: -1, resultSuccess: null});
                setQuestionIndex(questionIndex + 1);
                setTimerActive(true);
                setResetTimer(true);
            } else {
                gameOverCallback();
            }
        }

        // Display next question after a short delay
        setTimeout(nextQuestion, 2000);
    }

    return (
        <div className="quiz-game-view" ref={windowRef}>
            <Particle
                fullTime={fullTime}
                resetTimer={resetTimer} //Hook: value
                resetTimerCallback={() => setResetTimer(false)} //Hook: func
                timeOutCallback={() => userSelectAnswer(-1)}
                active={timerActive}
                question={currentQuestion}
                width={width}
            />
            <QuizQuestionView
                question={currentQuestion}
                questionCount={questions.length}
                questionIndex={questionIndex + 1}
                onClick={userSelectAnswer}
                resultAnswer={resultAnswer}
            ></QuizQuestionView>
            <AnswerCircles answersCorrect={results}></AnswerCircles>
            <Waves/>
            <svg id="svg" xmlns="http://www.w3.org/2000/svg" width="400"
                 height="232.86118980169974" viewBox="0, 0, 400,232.86118980169974">
                <g id="svgg">
                    <path id="path0"
                          d="M241.580 52.425 C 240.853 53.534,240.724 54.565,241.010 56.993 L 241.378 60.129 238.678 59.701 C 232.781 58.768,231.073 59.645,235.181 61.497 C 236.577 62.127,238.118 63.441,238.971 64.731 L 240.409 66.904 239.189 67.759 C 238.518 68.229,237.685 69.144,237.339 69.792 C 235.812 72.644,250.596 69.787,252.391 66.883 C 252.582 66.574,254.010 66.153,255.566 65.947 C 258.137 65.606,258.295 65.502,257.306 64.810 C 256.387 64.166,255.811 64.187,253.593 64.942 C 249.513 66.333,246.820 63.611,247.925 59.212 C 248.303 57.703,246.969 54.792,244.872 52.550 C 243.078 50.633,242.762 50.621,241.580 52.425 M291.332 62.505 C 290.958 63.540,290.652 65.324,290.652 66.471 C 290.652 68.823,290.558 68.877,288.473 67.723 C 284.320 65.425,281.174 64.448,280.651 65.294 C 280.414 65.677,280.552 65.728,281.029 65.434 C 281.558 65.107,281.682 65.222,281.451 65.824 C 281.242 66.370,282.437 68.070,284.770 70.545 C 288.785 74.804,288.910 75.342,286.102 76.270 C 282.963 77.307,283.369 78.172,287.063 78.315 C 293.636 78.569,294.889 78.358,297.925 76.490 C 300.336 75.006,301.337 74.712,303.412 74.877 C 306.115 75.092,306.652 74.637,304.838 73.666 C 304.102 73.272,302.932 73.251,301.369 73.602 C 297.168 74.546,296.287 73.679,296.592 68.902 C 296.924 63.713,292.736 58.621,291.332 62.505 M313.670 74.502 C 308.056 77.457,306.516 78.450,306.516 79.116 C 306.516 79.528,305.880 80.025,305.103 80.220 C 303.049 80.735,303.950 81.586,306.549 81.586 C 308.346 81.586,308.782 81.792,308.782 82.637 C 308.782 83.572,311.131 86.686,311.837 86.686 C 311.989 86.686,312.192 85.732,312.289 84.566 C 312.483 82.225,313.726 81.513,315.144 82.930 C 315.973 83.759,316.894 84.048,318.298 83.920 C 318.824 83.872,318.927 83.294,318.661 81.879 C 318.255 79.713,320.485 78.075,322.380 79.148 C 322.847 79.412,324.249 79.492,325.496 79.324 C 328.924 78.862,326.317 77.620,321.920 77.620 C 318.458 77.620,317.577 77.147,317.193 75.077 C 316.924 73.625,315.712 73.428,313.670 74.502 M343.488 84.726 C 339.463 87.301,336.658 90.922,337.331 92.676 C 337.713 93.671,349.679 93.380,350.708 92.351 C 352.202 90.857,354.991 90.004,357.266 90.345 C 360.247 90.792,361.420 90.303,359.949 89.226 C 359.220 88.693,357.812 88.569,355.083 88.797 C 351.606 89.088,351.110 88.994,349.842 87.803 C 348.285 86.341,347.984 83.993,349.289 83.492 C 350.365 83.079,349.826 82.153,348.509 82.153 C 347.959 82.153,345.700 83.311,343.488 84.726 M300.951 89.806 C 300.584 90.612,300.283 91.993,300.283 92.874 C 300.283 94.395,300.131 94.491,297.309 94.752 C 293.624 95.093,292.851 95.292,291.940 96.135 C 290.643 97.335,291.175 97.745,293.764 97.539 C 296.780 97.299,297.495 98.257,296.000 100.538 C 295.467 101.352,295.214 102.202,295.438 102.426 C 296.337 103.325,306.180 102.828,308.122 101.785 C 309.162 101.227,310.947 100.813,312.088 100.865 C 315.621 101.026,315.916 100.937,314.723 100.064 C 313.974 99.516,312.674 99.367,310.426 99.571 C 305.905 99.981,304.205 97.135,306.116 92.351 C 306.327 91.823,305.845 91.021,304.843 90.231 C 302.336 88.256,301.689 88.185,300.951 89.806 M266.147 90.055 C 265.290 90.329,264.589 90.431,264.589 90.281 C 264.589 90.131,263.888 90.499,263.031 91.099 C 262.174 91.699,261.091 92.315,260.623 92.469 C 260.105 92.639,260.463 92.903,261.537 93.144 C 262.853 93.440,263.572 94.107,264.370 95.772 C 265.843 98.847,268.214 98.972,269.439 96.039 C 270.476 93.557,273.028 92.410,277.291 92.510 C 279.035 92.551,280.119 92.780,279.732 93.025 C 279.241 93.337,279.319 93.470,279.995 93.476 C 281.452 93.489,281.882 92.283,280.674 91.568 C 278.459 90.258,268.695 89.241,266.147 90.055 M380.595 92.619 C 378.803 93.699,377.337 94.466,377.337 94.323 C 377.337 94.179,376.827 94.499,376.204 95.032 C 375.581 95.566,375.071 96.297,375.071 96.657 C 375.071 97.018,374.497 97.712,373.796 98.201 L 372.521 99.091 374.045 99.120 C 375.390 99.147,375.590 99.399,375.745 101.270 C 375.973 104.016,377.563 104.531,377.745 101.918 C 377.814 100.934,377.947 100.051,378.041 99.957 C 378.434 99.564,384.494 99.542,385.343 99.930 C 386.039 100.248,386.412 99.937,386.853 98.672 C 387.479 96.876,388.006 96.618,392.221 96.045 C 393.799 95.831,394.777 95.443,394.573 95.113 C 394.157 94.439,388.543 94.684,388.024 95.398 C 387.388 96.273,386.451 95.203,385.829 92.894 C 385.093 90.158,384.709 90.138,380.595 92.619 M363.449 114.452 C 362.266 114.894,359.773 119.256,359.773 120.884 C 359.773 121.395,359.541 121.813,359.257 121.813 C 358.644 121.813,355.807 118.542,355.807 117.836 C 355.807 117.368,353.654 117.545,353.145 118.055 C 352.534 118.665,353.844 122.666,355.620 125.615 C 357.573 128.859,357.408 130.312,355.085 130.312 C 354.807 130.312,354.672 130.588,354.785 130.927 C 355.350 132.622,362.225 132.094,366.298 130.042 C 368.795 128.784,371.091 128.041,372.521 128.027 C 374.669 128.006,374.719 127.967,373.481 127.280 C 372.500 126.736,371.486 126.696,369.414 127.120 C 365.277 127.968,364.799 127.344,365.190 121.604 C 365.577 115.920,365.072 113.845,363.449 114.452 M270.855 120.922 C 270.309 121.580,270.299 122.214,270.811 123.763 C 271.694 126.439,271.258 126.912,267.908 126.912 C 264.894 126.912,264.240 127.994,266.878 128.617 C 268.743 129.057,270.880 132.578,269.282 132.578 C 266.706 132.578,265.917 134.117,268.303 134.489 C 272.738 135.181,275.128 135.020,278.350 133.809 C 280.153 133.132,282.777 132.578,284.180 132.578 C 286.228 132.578,286.597 132.435,286.052 131.852 C 285.594 131.362,284.225 131.196,281.830 131.341 C 277.718 131.590,276.740 130.670,277.205 126.989 C 277.534 124.385,276.349 122.252,274.017 121.249 C 273.038 120.828,272.085 120.392,271.898 120.280 C 271.711 120.168,271.242 120.457,270.855 120.922 M116.339 124.760 C 116.078 125.165,115.864 126.006,115.864 126.629 C 115.864 127.643,115.551 127.742,112.890 127.568 C 109.658 127.358,108.898 128.173,111.303 129.269 C 112.507 129.817,113.881 132.246,113.881 133.825 C 113.881 134.106,113.103 134.608,112.152 134.939 C 109.848 135.743,110.379 136.105,114.600 136.610 C 117.592 136.968,118.755 136.818,122.222 135.626 C 124.472 134.853,126.639 134.264,127.038 134.316 C 129.289 134.614,130.440 134.265,129.791 133.484 C 129.306 132.898,128.261 132.769,125.815 132.990 C 121.822 133.352,120.793 132.347,121.902 129.168 C 122.877 126.371,117.865 122.399,116.339 124.760 M186.969 128.582 C 185.879 129.162,184.795 129.519,184.561 129.374 C 184.327 129.230,184.136 129.387,184.136 129.724 C 184.136 130.060,183.499 130.626,182.720 130.981 C 181.941 131.336,181.303 132.075,181.303 132.624 C 181.303 133.275,180.703 133.753,179.576 134.000 C 177.687 134.415,178.158 135.977,180.173 135.977 C 180.724 135.977,181.332 136.549,181.530 137.252 C 181.865 138.442,181.939 138.461,182.650 137.535 C 183.139 136.898,184.198 136.538,185.615 136.529 C 186.827 136.520,189.596 135.755,191.768 134.829 C 194.306 133.747,196.686 133.144,198.426 133.144 C 200.111 133.144,201.133 132.895,201.133 132.483 C 201.133 132.120,200.965 131.990,200.760 132.195 C 200.555 132.400,200.058 132.294,199.654 131.960 C 199.130 131.524,198.035 131.550,195.806 132.048 C 191.333 133.049,188.847 131.455,190.388 128.575 C 191.166 127.121,189.707 127.124,186.969 128.582 "
                          stroke="none" fill="#000000" fillRule="evenodd"></path>
                </g>
            </svg>

        </div>
    );
}

export const useContainerDimensions = myRef => {
    const getDimensions = () => ({
      width: myRef.current.offsetWidth,
      height: myRef.current.offsetHeight
    })

    const [dimensions, setDimensions] = useState({ width: 0, height: 0 })

    useEffect(() => {
      const handleResize = () => {
        setDimensions(getDimensions())
      }

      if (myRef.current) {
        setDimensions(getDimensions())
      }

      window.addEventListener("resize", handleResize)

      return () => {
        window.removeEventListener("resize", handleResize)
      }
    }, [myRef])

    return dimensions;
  };


export default QuizGameView;